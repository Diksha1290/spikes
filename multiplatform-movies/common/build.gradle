apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.codingfeline.buildkonfig'

// TODO work around for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

buildkonfig {
    packageName = 'com.novoda.movies'

    // default config is required
    defaultConfigs {
        buildConfigField 'STRING', 'API_KEY', 'value'
    }

    targetConfigs {
        // this name should be same as target names you specified
        android {
            buildConfigField 'STRING', 'API_KEY', 'valueForAndroid'
        }

        ios {
            buildConfigField 'STRING', 'API_KEY', 'valueForNative'
        }
    }
}

kotlin {
    targets {
        fromPreset(presets.jvm, 'jvm')

        // Change to `presets.iosArm64` to deploy the app to iPhone
        fromPreset(presets.iosX64, 'iOS') {
            compilations.main.outputKinds('FRAMEWORK')
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"

                implementation "io.ktor:ktor-client-core:$ktor_version"
                implementation "io.ktor:ktor-client-json:$ktor_version"
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        jvmMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"

                implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-okhttp:$ktor_version"
            }
        }
        jvmTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
                api "io.ktor:ktor-client-mock-jvm:$ktor_version"
                implementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0"
                implementation "org.mockito:mockito-inline:2.22.0"
            }
        }
        iOSMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"

                implementation "io.ktor:ktor-client-ios:$ktor_version"
                implementation "io.ktor:ktor-client-core-native:$ktor_version"
                implementation "io.ktor:ktor-client-json-native:$ktor_version"  
            }
        }
    }

    task packForXCode(type: Sync) {
        final File frameworkDir = new File(buildDir, "xcode-frameworks")
        final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'

        inputs.property "mode", mode
        dependsOn kotlin.targets.iOS.compilations.main.linkTaskName("FRAMEWORK", mode)

        from { kotlin.targets.iOS.compilations.main.getBinary("FRAMEWORK", mode).parentFile }
        into frameworkDir

        doLast {
            new File(frameworkDir, 'gradlew').with {
                text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
                setExecutable(true)
            }
        }
    }

    tasks.build.dependsOn packForXCode
}
